/////////////////////////////////////////////////////////////////////////////////////
// Communicate with hardware RTC and provide utility functions to the other code
/////////////////////////////////////////////////////////////////////////////////////

// TODO: fix function names!

#include "powertrack.h"

// Install RTCLib by Adafruit.
// Tested against version 1.2.0
#include <RTClib.h>

enum {PRE_INIT, NOT_PRESENT, UNINITIALIZED, INITIALIZED} e_rtcState;

RTC_PCF8523 rtc;

/////////////////////////////////////////////////////////////////////////////////////
// rtcInit
// Init (called from main)
/////////////////////////////////////////////////////////////////////////////////////
void rtcInit() {
  if (!rtc.begin()) {
    e_rtcState = NOT_PRESENT;
  }
  else {
    e_rtcState = rtc.initialized() ? INITIALIZED : UNINITIALIZED;
  }
  
  if (INITIALIZED != e_rtcState)
    statusReportStatus(statusRTCAccessError, true);
}

// temporary storage while setting RTC
DateTime dt;
TimeSpan tm;

/////////////////////////////////////////////////////////////////////////////////////
// rtcReadTime
// rtcXXX
// read the RTC into "now" variable, and accessors for the various time elements
/////////////////////////////////////////////////////////////////////////////////////
// value that will be used for the accessors and gets set by rtcReadTime()
DateTime now;

void rtcReadTime() {
  now = rtc.now();
}

int rtcYear() {
  return now.year();
}

int rtcMonth() {
  return now.month();
}

int rtcDay() {
  return now.day();
}

int rtcHour() {
  return now.hour();
}

int rtcMinute() {
  return now.minute();
}

int rtcSecond() {
  return now.second();
}

/////////////////////////////////////////////////////////////////////////////////////
// rtcPresentTime
// formatted time string
/////////////////////////////////////////////////////////////////////////////////////
// TODO: get rid of static variable(pass in buffer and length)
char *rtcPresentTime()
{
  static char buf[20];
  rtcReadTime();
  snprintf(buf, sizeof buf,"%04d/%02d/%02d %02d:%02d:%02d", 
    now.year(), now.month(), now.day(),
    now.hour(), now.minute(), now.second() );
  return buf;
}

/////////////////////////////////////////////////////////////////////////////////////
// rtcSetTime
// set time buffer from formatted time string
/////////////////////////////////////////////////////////////////////////////////////
void rtcSetTime(const char *s)
{
  int hour,min,sec;
  sscanf(s, "%d:%d:%d", &hour, &min, &sec );
  tm = TimeSpan(0,hour,min,sec);
}

/////////////////////////////////////////////////////////////////////////////////////
// rtcSetDate
// set time buffer from formatted date string
/////////////////////////////////////////////////////////////////////////////////////
void rtcSetDate (const char *s) 
{
  int year, month, day;
  sscanf(s, "%d/%d/%d", &year, &month, &day );
  dt = DateTime(year, month, day, 0, 0, 0);
}

/////////////////////////////////////////////////////////////////////////////////////
// rtcAdjust
// set RTC to combined time and date objects as set by rtcSetTime and rtcSetDate
/////////////////////////////////////////////////////////////////////////////////////
void rtcAdjust()
{
  rtc.adjust(dt+tm);
}

/////////////////////////////////////////////////////////////////////////////////////
// rtcGetTime
// read time seconds (unix time), first setting now object from RTC
/////////////////////////////////////////////////////////////////////////////////////
long rtcGetTime() {
  rtcReadTime();
  return now.unixtime();
}

/////////////////////////////////////////////////////////////////////////////////////
// rtcTime
// read time seconds (unix time) from now object
/////////////////////////////////////////////////////////////////////////////////////
long rtcTime() {
  return now.unixtime();
}
